const { spawn } = require('child_process');
const path = require("path")
const fs = require("fs")
const asyncHandler = require('express-async-handler');
const DiscoveryModel = require('../models/discovery.model');

// Constants used in the APIs.
const F5_SSH_PORT = '443';
const CONTROLLER_VERSION = '30.2.1';
const TENANT_NAME = 'admin';
const VRF_NAME = 'global';
const CLOUD_NAME = 'Default-Cloud';
const OUTPUT_FOLDER_NAME = 'migration';

// Run f5_converter, generate output, save in DB.
exports.generateReport = asyncHandler(async (req, res, next) => {
    const { f5_host_ip, f5_ssh_user, f5_ssh_password } = req.body;
    const outputFilePath = `./${OUTPUT_FOLDER_NAME}/${f5_host_ip}/output/bigip_discovery_data.json`;
    let dataToSend;

    // Spawn new child process to call the python script.
    const pythonProcess = spawn('f5_converter.py', [
        '--f5_host_ip', f5_host_ip, 
        '--f5_ssh_user', f5_ssh_user, 
        '--f5_ssh_password', f5_ssh_password, 
        '--f5_ssh_port', F5_SSH_PORT,
        '--vrf', VRF_NAME, 
        '--tenant', TENANT_NAME, 
        '--controller_version', CONTROLLER_VERSION, 
        '--cloud_name', CLOUD_NAME, 
        '-o', OUTPUT_FOLDER_NAME,
        '--discovery'
    ]);

    // Collect data from script.
    pythonProcess.stdout.on('data', function (data) {
        console.log('Pipe data from python script ...');
        dataToSend = data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
        console.error(`stderr: ${data}`);
    });

    // On close event, we are sure that stream from child process is closed.
    pythonProcess.on('close', (code) => {
        console.log(dataToSend);
        console.log(`child process close all stdio with code ${code}`);

        // Save the report JSON into DB if it exists/generated by tool.
        if (fs.existsSync(outputFilePath)) {
            fs.readFile(outputFilePath, async function(err, data) { 
                if (data) {
                    const outputJson = JSON.parse(data);
                    
                    try {
                        outputJson.downloadLink = outputFilePath.replace('./', '', 1); // Add the report download link

                        const saveResult = await DiscoveryModel.findOneAndUpdate({}, outputJson, { upsert: true });
                        console.log(saveResult);

                        res.status(200).json({ message: 'Report generated successfully.'});
                    } catch (err) {
                        res.status(404).json({ message: 'Error in saving the discovery report in DB, '+err.message});
                    }
                } else {
                    res.status(404).json({ message: 'Error in reading the discovery report from file, '+err.message});
                } 
            });
        } else {
            res.status(500).json({ message: 'Error in report generation'});
        }
    });
});

// Get the discovery report from DB.
exports.getReport = asyncHandler(async (req, res, next) => {
    try {
        const fetchResult = await DiscoveryModel.findOne();
        console.log(fetchResult);

        res.status(200).json(reportJson);
    } catch (err) {
        res.status(500).json({ message: 'Error in fetching report data'});
    }
});

exports.downloadReport = asyncHandler(async (req, res, next) => {
    try {
        const fetchResult = await DiscoveryModel.findOne(
            {},
            { downloadLink: 1, _id: 0 }
          ).lean();
        const reportFileRelativePath = `./${fetchResult.downloadLink}`;

        res.download(reportFileRelativePath, (err) => {
            if (err) {
                if (!res.headersSent) {
                    return res.status(500).json({ message: 'Error while report file downloading. ' + err.message });
                }
            }
        });
    } catch (err) {
        res.status(404).json({ message: 'Error while fetching report file path. ' + err.message });
    }
});

const reportJson = {
    "downloadLink": "migration/10.206.40.100/output/bigip_discovery_data.json",
    "pools": {
        "total": 125,
        "enabledCount": 10,
        "deactivatedCount": 5
    },
    "iRules": {
        "total": 123,
    },
    "tenants": {
        "total": 22
    },
    "virtualServices": {
        "total": 116,
        "types": {
            "L4": 0,
            "L7": 95,
            "DNS": 0,
            "UDP": 0,
            "SSL": 0,
            "WAF": 0
        },
        "enabledCount": 116,
        "deactivatedCount": 0
    }
};
